@page "/chat"



@rendermode InteractiveWebAssembly
@inject NavigationManager _navManager

<PageTitle>ChatPage</PageTitle>


<div class="row">
    <div class="col-ld-7">
        <div class="card">
            <div class="card-header">Chat</div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var item in Chats)
                    {
                        <li class="list-group-item mb-2">
                            @item.DateTime.ToString("dd/MM/yy")
                            <br />
                            <span class="fw-bold">@item.UserName:</span>
                            <br />
                            @item.Message
                        </li>
                    }
                </ul>
                <div class="mt-3">
                    <EditForm Model="chat" OnValidSubmit="SendChat">
                        <DataAnnotationsValidator />
                        <div class="vstack gap-1">
                            <InputText @bind-Value="chat.UserName" class="form-control" placeholder="User Name"></InputText>
                            <InputTextArea @bind-Value="chat.Message" class="form-control" placeholder="Message" />
                        </div>
                        <button class="float-end btn btn-success">Send</button>
                    </EditForm>
                </div>
            </div>
            <div class="card-footer fw-bold">
                @if (!IsConnected)
                {
                    <div class="alert alert-danger">
                        Chat Disconnected
                    </div>
                }
                else
                {
                    <div class="alert alert-success">
                        Chat Connected
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Chat chat = new();
    private HubConnection? _hubConnection;
    public List<Chat> Chats { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(_navManager.ToAbsoluteUri("/chathub"))
        .Build();

        _hubConnection.On<Chat>("ReceiveMessage", (chat) =>
        {
            Chats.Add(chat);
            InvokeAsync (() => StateHasChanged());
        });
        await _hubConnection.StartAsync();
        var httpClient = new HttpClient();
        Chats = await httpClient.GetFromJsonAsync<List<Chat>>("https://localhost:7019/api/Chat");

    }
    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    public void SendChat()
    {
        _hubConnection.SendAsync("SendMessage", chat);
        chat.Message = null;
    }
}
