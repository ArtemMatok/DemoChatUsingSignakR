@page "/chat"
@implements IDisposable

@inject ChatService _chatService
@rendermode InteractiveWebAssembly
@inject NavigationManager _navManager

<PageTitle>ChatPage</PageTitle>


<div class="row">
    <div class="col-ld-7">
        <div class="card">
            <div class="card-header">Chat</div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var item in _chatService.Chats)
                    {
                        <li class="list-group-item mb-2">
                            @item.DateTime.ToString("dd/MM/yy")
                            <br />
                            <span class="fw-bold">@item.UserName:</span>
                            <br />
                            @item.Message
                        </li>
                    }
                </ul>
                <div class="mt-3">
                    <EditForm Model="Chat" OnValidSubmit="SendMessageClicked">
                        <DataAnnotationsValidator />
                        <div class="vstack gap-1">
                            <InputText @bind-Value="Chat.UserName" class="form-control" placeholder="User Name"></InputText>
                            <InputTextArea @bind-Value="Chat.Message" class="form-control" placeholder="Message" />
                        </div>
                        <button class="float-end btn btn-success">Send</button>
                    </EditForm>
                </div>
            </div>
            <div class="card-footer fw-bold">
                @if (!_chatService.IsConnected)
                {
                    <div class="alert alert-danger">
                        Chat Disconnected
                    </div>
                }
                else
                {
                    <div class="alert alert-success">
                        Chat Connected
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    public static string? StoredUserName { get; set; }

    private Chat Chat = new();



    protected override async Task OnInitializedAsync()
    {
        _chatService.InvokeChatDisplay += StateHasChanged;
        await _chatService.StartConnectionAsync();
        _chatService.ReceiveMessage();
    }

    //async void SendMessageClicked() => await _chatService.SendChat(Chat);
    async void SendMessageClicked()
    {
        await _chatService.SendChat(Chat);
        Console.WriteLine(Chat.Message);
    }
    public void Dispose() => _chatService.InvokeChatDisplay -= StateHasChanged;



}
